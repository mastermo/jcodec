package org.jcodec.codecs.h264;

import static org.jcodec.common.model.ColorSpace.YUV420;

import java.nio.ByteBuffer;

import org.jcodec.codecs.h264.io.model.MBlockIPCM;
import org.jcodec.codecs.h264.io.read.IPCMMblockReader;
import org.jcodec.codecs.util.BinUtil;
import org.jcodec.common.io.BitReader;

public class TestMBlockIPCM extends JAVCTestCase {

	public void testIPCM1() throws Exception {
		String bits = "00101011 11011000 11111110 11111001 11111011 11111110"
				+ "11111110 11111101 11111011 11111100 11111110 11111110 11111110 11111110 11111110"
				+ "11111101 00110001 11000110 11000001 11010011 11100100 11001101 11010101 10111001"
				+ "11010011 11001111 10111010 11111000 11000110 11001011 11010000 10110111 00110000"
				+ "11000010 10110001 10101011 11000101 10101101 10111001 10001000 10111111 11000011"
				+ "10001010 10110011 10001110 10110000 10110001 10000111 00101110 11010110 11100001"
				+ "10101001 10110001 10111101 11000110 10100000 11001011 11010000 10110001 10100101"
				+ "10101101 11000100 10111111 10011100 00101001 10111001 11010000 10110100 11001011"
				+ "11100100 11100010 11001000 11010110 11100010 11100001 11100011 11100100 11100001"
				+ "11100000 11010010 00011111 10000010 10101101 10110010 11010111 11100110 11011101"
				+ "11010100 11011100 11100101 11100011 11100100 11100101 11100011 11100010 11100010"
				+ "00011101 01110111 11000010 11011000 11010011 11010101 11011011 11011110 11100001"
				+ "11011111 11011100 11011011 11011010 11011010 11011010 11011010 00011001 01111110"
				+ "11011011 11100000 11011001 11100000 11100011 11100011 11100011 11100010 11100001"
				+ "11100000 11011100 11011100 11011101 11011110 00011010 10000011 11010111 11011111"
				+ "11100010 11100001 11100001 11100001 11100001 11100010 11011111 11011011 11011101"
				+ "11011101 11011011 11011100 00011110 10001000 11011000 11100010 11011111 11100000"
				+ "11100001 11100001 11100000 11011101 11011001 11011101 11011110 11011011 11011100"
				+ "11100010 00011110 10001000 11011000 11100011 11100000 11100000 11100001 11011111"
				+ "11011101 11011010 11011101 11011000 11010011 11100000 11100000 11010011 00011101"
				+ "10000111 11011001 11100001 11011110 11011101 11011110 11011110 11011101 11010001"
				+ "10110101 10011011 10111010 11010010 10111010 10100100 00011101 10000110 11011000"
				+ "11100000 11100010 11100110 11100110 11100011 11001110 10110001 10010010 01110001"
				+ "10010101 10100010 10010011 10010110 00011101 10000111 11011011 11100111 11100001"
				+ "11001001 10111110 10111001 10100011 10010000 10011001 10001100 01111111 10001111"
				+ "10100101 10111000 00011110 10001011 11010010 11000000 10100101 10001110 10000110"
				+ "10000101 10001111 10001101 10000001 10001010 10010110 10110010 11001001 11001111"
				+ "00011110 01111101 10100110 10010001 10010000 10011010 10000100 01101111 01110110"
				+ "10100001 10101111 10110100 11001100 11010110 11010101 11010001 10000011 10001000"
				+ "10001000 10001001 10001001 10001000 10001001 10001001 10000101 10010010 10010010"
				+ "10010010 10010010 10010100 10010011 10010011 10000000 10000011 10000100 10000010"
				+ "10000011 10000010 10000000 10000001 01111111 01111101 01111100 01111011 01111011"
				+ "01111001 01111000 01111001 10000000 01111101 01111100 01111011 01111010 01111000"
				+ "01111000 01110111 10000000 01111101 01111100 01111010 01110101 01110011 01110100"
				+ "01110010 01111111 01111011 01110111 01110101 01110001 01110011 01110110 01110110"
				+ "01111101 01110111 01110100 01110100 01110111 01111000 01111001 01110110 01111000"
				+ "01101010 01101101 01101000 01101001 01101011 01101010 01101000 01110011 01010000"
				+ "01010001 01001110 01010001 01001011 01001101 01001110 01111101 01110011 01110100"
				+ "01110011 01110100 01110100 01110101 01110011 10000001 10000010 10000011 10000010"
				+ "10000010 10000011 10000011 10000011 10000000 10000001 10000010 10000010 10000011"
				+ "10000011 10000011 10000011 10000000 10000001 10000010 10000010 10000100 10000100"
				+ "10000100 10000101 10000000 10000001 10000011 10000011 10000101 10000101 10000101"
				+ "10000101 10000001 10000011 10000100 10000101 10000101 10000101 10000101 10000101";

		BitReader reader = new BitReader(ByteBuffer.wrap(BinUtil
				.binaryStringToBytes(bits)));

		IPCMMblockReader mblockReader = new IPCMMblockReader(
				YUV420, 8, 8);

		MBlockIPCM mblock = mblockReader.readMBlockIPCM(reader);

		assertArrayEquals(new int[] { 43, 216, 254, 249, 251, 254, 254, 253,
				251, 252, 254, 254, 254, 254, 254, 253, 49, 198, 193, 211, 228,
				205, 213, 185, 211, 207, 186, 248, 198, 203, 208, 183, 48, 194,
				177, 171, 197, 173, 185, 136, 191, 195, 138, 179, 142, 176,
				177, 135, 46, 214, 225, 169, 177, 189, 198, 160, 203, 208, 177,
				165, 173, 196, 191, 156, 41, 185, 208, 180, 203, 228, 226, 200,
				214, 226, 225, 227, 228, 225, 224, 210, 31, 130, 173, 178, 215,
				230, 221, 212, 220, 229, 227, 228, 229, 227, 226, 226, 29, 119,
				194, 216, 211, 213, 219, 222, 225, 223, 220, 219, 218, 218,
				218, 218, 25, 126, 219, 224, 217, 224, 227, 227, 227, 226, 225,
				224, 220, 220, 221, 222, 26, 131, 215, 223, 226, 225, 225, 225,
				225, 226, 223, 219, 221, 221, 219, 220, 30, 136, 216, 226, 223,
				224, 225, 225, 224, 221, 217, 221, 222, 219, 220, 226, 30, 136,
				216, 227, 224, 224, 225, 223, 221, 218, 221, 216, 211, 224,
				224, 211, 29, 135, 217, 225, 222, 221, 222, 222, 221, 209, 181,
				155, 186, 210, 186, 164, 29, 134, 216, 224, 226, 230, 230, 227,
				206, 177, 146, 113, 149, 162, 147, 150, 29, 135, 219, 231, 225,
				201, 190, 185, 163, 144, 153, 140, 127, 143, 165, 184, 30, 139,
				210, 192, 165, 142, 134, 133, 143, 141, 129, 138, 150, 178,
				201, 207, 30, 125, 166, 145, 144, 154, 132, 111, 118, 161, 175,
				180, 204, 214, 213, 209 }, mblock.getSamplesLuma());
		assertArrayEquals(new int[] { 131, 136, 136, 137, 137, 136, 137, 137,
				133, 146, 146, 146, 146, 148, 147, 147, 128, 131, 132, 130,
				131, 130, 128, 129, 127, 125, 124, 123, 123, 121, 120, 121,
				128, 125, 124, 123, 122, 120, 120, 119, 128, 125, 124, 122,
				117, 115, 116, 114, 127, 123, 119, 117, 113, 115, 118, 118,
				125, 119, 116, 116, 119, 120, 121, 118, 120, 106, 109, 104,
				105, 107, 106, 104, 115, 80, 81, 78, 81, 75, 77, 78, 125, 115,
				116, 115, 116, 116, 117, 115, 129, 130, 131, 130, 130, 131,
				131, 131, 128, 129, 130, 130, 131, 131, 131, 131, 128, 129,
				130, 130, 132, 132, 132, 133, 128, 129, 131, 131, 133, 133,
				133, 133, 129, 131, 132, 133, 133, 133, 133, 133 }, mblock
				.getSamplesChroma());
	}
}
