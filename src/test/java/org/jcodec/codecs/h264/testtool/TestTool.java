package org.jcodec.codecs.h264.testtool;

import static org.jcodec.common.ByteBufferUtil.map;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;

import org.apache.commons.io.IOUtils;
import org.jcodec.codecs.h264.H264Decoder;
import org.jcodec.codecs.h264.annexb.MappedH264ES;
import org.jcodec.codecs.util.PGMIO;
import org.jcodec.common.ByteBufferUtil;
import org.jcodec.common.model.ColorSpace;
import org.jcodec.common.model.Picture;

/**
 * A tool used for batch testing of the decoder
 * 
 * Compares frames generated by the javcodec h264 to the frames generated by the
 * reference implementation of the decoder
 * 
 * @author Jay Codec
 * 
 */
public class TestTool {

    static class Args {
        File refFolder;
        String h264Name;
        File framesFolder;
    }

    public static void main(String[] args) {

        Args a = checkArgs(args);
        if (args == null)
            return;

        H264Decoder decoder;
        MappedH264ES es;
        try {
            es = new MappedH264ES(map(a.h264Name));
            decoder = new H264Decoder();
        } catch (IOException e) {
            System.err.println("Could not read h264 source file");
            System.exit(-1);
            return;
        }
        
        Picture buf = Picture.create(1920, 1088, ColorSpace.YUV420);

        for (int i = 0;; i++) {

            String baseName = "ref_d";
            String nameForY = baseName + i + "y.pgm";
            String nameForCb = baseName + i + "cb.pgm";
            String nameForCr = baseName + i + "cr.pgm";

            try {
                Picture ref = readFrame(new File(a.refFolder, nameForY), new File(a.refFolder, nameForCb), new File(
                        a.refFolder, nameForCr));

                System.out.print("\nFrame " + i + " -- ");
                ByteBuffer nextFrame = es.nextFrame();
                Picture frame = decoder.decodeFrame(nextFrame.duplicate(), buf.getData());
                if (frame == null)
                    break;

                if (a.framesFolder != null) {
                    File frameFile = new File(a.framesFolder, "frame" + i + ".264");
                    ByteBufferUtil.writeTo(nextFrame, frameFile);
                }

                if (!compareFrames(ref, frame)) {
                    System.out.print("DIFFERS");
                } else {
                    System.out.print("EQUALS");
                }

            } catch (IOException e) {
                System.out.println("\nFinished reading frames");
                break;
            }
        }
    }

    private static Args checkArgs(String[] args) {
        if (args.length < 2) {
            System.err.println("\nSyntax: <folder with ref imgs> <.264 file> [folder to store frames]");
            System.exit(-1);
            return null;
        }

        Args result = new Args();
        String folderName = args[0];
        result.refFolder = new File(folderName);

        result.h264Name = args[1];

        if (args.length > 2) {
            String framesFolderName = args[2];
            if (framesFolderName != null) {
                result.framesFolder = new File(framesFolderName);
            }
        }

        return result;
    }

    private static Picture readFrame(File yFile, File cbFile, File crFile) throws IOException {
        Picture luma = readComponent(yFile);
        Picture cb = readComponent(cbFile);
        Picture cr = readComponent(crFile);

        return new Picture(luma.getWidth(), luma.getHeight(), new int[][] { luma.getPlaneData(0), cb.getPlaneData(0),
                cr.getPlaneData(0) }, ColorSpace.YUV420);

    }

    private static Picture readComponent(File f) throws IOException {
        InputStream is = null;
        try {
            is = new BufferedInputStream(new FileInputStream(f));
            return PGMIO.readPGM(is);
        } finally {
            IOUtils.closeQuietly(is);
        }
    }

    private static boolean compareFrames(Picture ref, Picture frame) {
        if (!compareArray(ref.getPlaneData(0), frame.getPlaneData(0)))
            return false;
        if (!compareArray(ref.getPlaneData(1), frame.getPlaneData(1)))
            return false;
        if (!compareArray(ref.getPlaneData(2), frame.getPlaneData(2)))
            return false;

        return true;
    }

    private static boolean compareArray(int[] a, int[] b) {
        if (a.length != b.length)
            return false;

        for (int i = 0; i < a.length; i++) {
            if (a[i] != b[i])
                return false;
        }

        return true;
    }
}
